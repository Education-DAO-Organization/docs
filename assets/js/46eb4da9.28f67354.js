"use strict";(self.webpackChunkeducation_docs=self.webpackChunkeducation_docs||[]).push([[1678],{664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(4848),i=n(8453);const a={},r="Truffle Suite Deep Dive",s={id:"courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L2-intro-tutorial/index",title:"Truffle Suite Deep Dive",description:"As with most things, the best way to learn is by doing, so without further ado let\u2019s dive into a hands on example of using Truffle.",source:"@site/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L2-intro-tutorial/index.md",sourceDirName:"courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L2-intro-tutorial",slug:"/courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L2-intro-tutorial/",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L2-intro-tutorial/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"oliver renwick",lastUpdatedAt:1721061896e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"index",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-intro-to-truffle/L1-background/"},next:{title:"Solidity Background and Context",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M2-solidity/L1-background-context/"}},c={},l=[{value:"Initialize an Empty Project",id:"initialize-an-empty-project",level:2},{value:"Create a Contract",id:"create-a-contract",level:2},{value:"Compilation, baby!",id:"compilation-baby",level:2},{value:"Migrating (or Deploying) Your Contract",id:"migrating-or-deploying-your-contract",level:2},{value:"Interacting with SimpleStorage",id:"interacting-with-simplestorage",level:2},{value:"Ganache GUI",id:"ganache-gui",level:2},{value:"Creating a Workspace",id:"creating-a-workspace",level:3},{value:"Migrating our contracts to Ganache UI",id:"migrating-our-contracts-to-ganache-ui",level:3},{value:"Ganache CLI",id:"ganache-cli",level:2},{value:"Migrating our contracts to Ganache CLI",id:"migrating-our-contracts-to-ganache-cli",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Additional Material",id:"additional-material",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"truffle-suite-deep-dive",children:"Truffle Suite Deep Dive"}),"\n",(0,o.jsx)(t.p,{children:"As with most things, the best way to learn is by doing, so without further ado let\u2019s dive into a hands on example of using Truffle."}),"\n",(0,o.jsxs)(t.p,{children:["In this example we\u2019ll be leveraging some of the core Truffle commands to build the decentralized equivalent of a ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program",children:"\u201cHello World!\u201d program"}),", aka ",(0,o.jsx)(t.code,{children:"SimpleStorage"}),". As the name suggests, this example will provide a means of both storing some on-chain data (essentially state stored indefinitely on the blockchain) and subsequently retrieving this state."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"Note: If you\u2019re going to be following along, this example assumes you followed the steps last lesson to successfully install Truffle"})}),"\n",(0,o.jsx)(t.h2,{id:"initialize-an-empty-project",children:"Initialize an Empty Project"}),"\n",(0,o.jsxs)(t.p,{children:["Let\u2019s begin by creating an empty project using the ",(0,o.jsx)(t.code,{children:"init"})," command. In a new directory (e.g. \u201cSimpleStorage\u201d) and from your terminal, run the following commands."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle init simple-storage-demo\ncd simple-storage-demo\n"})}),"\n",(0,o.jsx)(t.p,{children:"Congratulations, you now have a bare bones project! Next up, let\u2019s create a contract within which we\u2019ll be able to store our SimpleStorage project\u2019s code."}),"\n",(0,o.jsx)(t.h2,{id:"create-a-contract",children:"Create a Contract"}),"\n",(0,o.jsx)(t.p,{children:"Truffle provides a create command with which you can achieve this, although as we'll show later it\u2019s often just as easy to create the file via your favorite editor environment."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle create contract SimpleStorage\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This will create a new Solidity (note that this is the default language) file, ",(0,o.jsx)(t.code,{children:"SimpleStorage.sol"})," within your contracts directory."]}),"\n",(0,o.jsxs)(t.p,{children:["Using a code editor (we recommend VS Code), paste the following Solidity code into the ",(0,o.jsx)(t.code,{children:"SimpleStorage.sol"})," file and save:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract SimpleStorage {  \n  uint storedData;  \n  \n  function set(uint x) public {    \n    storedData = x;  \n  }  \n  \n  function get() public view returns (uint) {    \n    return storedData;  \n  }\n}          \n"})}),"\n",(0,o.jsxs)(t.p,{children:["Sweet, your first contract! Now let\u2019s try out the ",(0,o.jsx)(t.code,{children:"compile"})," command we saw earlier."]}),"\n",(0,o.jsx)(t.h2,{id:"compilation-baby",children:"Compilation, baby!"}),"\n",(0,o.jsxs)(t.p,{children:["Running the ",(0,o.jsx)(t.code,{children:"compile"})," command from your terminal like the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"  $ truffle compile  \n  \n  Compiling your contracts...\n  ===========================\n  > Compiling ./contracts/SimpleStorage.sol\n  > Artifacts written to /Users/emilylin/dev/proof-of-existence/build/contracts\n  > Compiled successfully using:\n    - solc: 0.8.16+commit.07a7930e.Emscripten.clang\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Assuming all went smoothly, Truffle should have compiled your contract and added the resultant output (something referred to as build ",(0,o.jsx)(t.strong,{children:"artifacts"})," that we\u2019ll explore in more detail later) to ",(0,o.jsx)(t.code,{children:"build/contracts/SimpleStorage.json"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Next up we\u2019re going to explore deploying our contract to a simulation of a blockchain network using ",(0,o.jsx)(t.a,{href:"https://www.trufflesuite.com/ganache",children:"Ganache."})]}),"\n",(0,o.jsx)(t.h2,{id:"migrating-or-deploying-your-contract",children:"Migrating (or Deploying) Your Contract"}),"\n",(0,o.jsx)(t.p,{children:"So we\u2019ve created and compiled a contract, but now we need somewhere to deploy it so we can begin testing. This is where Ganache comes in!"}),"\n",(0,o.jsx)(t.p,{children:"As alluded to earlier, Ganache comes in a number of different flavors. For ease we\u2019re going to start by using the version built directly into Truffle itself (more on standalone Ganache CLI and Ganache UI shortly)."}),"\n",(0,o.jsxs)(t.p,{children:["To achieve this we can use Truffle\u2019s ",(0,o.jsx)(t.code,{children:"develop"})," command which both starts up a Ganache instance and provides us with an interactive REPL with which we can actually interact with our contracts."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"  $ truffle develop    \n"})}),"\n",(0,o.jsx)(t.p,{children:"And you should see this, if successful:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"  Truffle Develop started at http://127.0.0.1:9545/  \n  \n  Accounts:  \n  (0) 0x5ca1605d4671669b38f7e37c881ed996ede5ac68  \n  \u2026  \n  Private Keys:  \n  (0) dd7a8c358901b0f572e461585c9ab27f92b24902c45859114776af12077cb208  \n  \u2026  \n  Mnemonic: cloth either reunion project inflict inside ghost welcome tip lemon again knee  \n  \n  \u26a0\ufe0f  Important \u26a0\ufe0f  : This mnemonic was created for you by Truffle. It is not secure.  \n  Ensure you do not use it on production blockchains, or else you risk losing funds.  \n  \n  truffle(develop)>    \n"})}),"\n",(0,o.jsx)(t.p,{children:"We\u2019ll be glossing over the details of the above output for the moment, other than to say it gives us access to 10 pre-funded accounts (as a default) that we can leverage as a means of interacting contracts."}),"\n",(0,o.jsx)(t.p,{children:"Before we actually migrate our contract we\u2019ll need to create a migration script. This step enables you to granularly instruct Truffle how to migrate your contracts, including things like constructor arguments."}),"\n",(0,o.jsxs)(t.p,{children:["In the migrations directory create a file called ",(0,o.jsx)(t.code,{children:"1_deploy_contracts.js"})," and copy into that file the following:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"var SimpleStorage = artifacts.require('SimpleStorage');\n\nmodule.exports = function(deployer) {  \n  deployer.deploy(SimpleStorage);\n};          \n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now that we have a migration script ready to go we can migrate as follows. Since we\u2019re doing this migration from the Truffle console we started with ",(0,o.jsx)(t.code,{children:"truffle develop"}),", you can actually omit ",(0,o.jsx)(t.code,{children:"truffle"})," from your command and just run:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle(develop)> migrate      \n"})}),"\n",(0,o.jsx)(t.p,{children:"Assuming all goes well, you should see the following:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"1_deploy_contracts.js\n=====================\n\n   Deploying 'SimpleStorage'\n   -------------------------\n   > transaction hash:    0xd11b6d9e99ab82640df442674c3363940d7aac31176ab535d3442010a666ffb0\n   > Blocks: 0            Seconds: 0\n   > contract address:    0xE30DdDe92C79830A93BAAa445Fb9755ED3Cb13eB\n   > block number:        1\n   > block timestamp:     1664310955\n   > account:             0xdcD10bB70E998bA982751b632a2A6472273c1f0f\n   > balance:             99.999575921125\n   > gas used:            125653 (0x1ead5)\n   > gas price:           3.375 gwei\n   > value sent:          0 ETH\n   > total cost:          0.000424078875 ETH\n\n   > Saving artifacts\n   -------------------------------------\n   > Total cost:      0.000424078875 ETH\n\nSummary\n=======\n> Total deployments:   1\n> Final cost:          0.000424078875 ETH   \n"})}),"\n",(0,o.jsxs)(t.p,{children:["One of the key output values from the above is the contract address (",(0,o.jsx)(t.code,{children:"0xE30DdDe92C79830A93BAAa445Fb9755ED3Cb13eB"})," in the above example). As the name might suggest, this is the address of the deployed instance of contract and the means with how you\u2019d reference it when sending future transactions."]}),"\n",(0,o.jsxs)(t.p,{children:["Migrations is definitely more of a deeper topic that we\u2019ll be covering more later. In the interim, more details on migrations can be found in Truffle\u2019s documentation ",(0,o.jsx)(t.a,{href:"https://www.trufflesuite.com/docs/truffle/getting-started/running-migrations",children:"here."})]}),"\n",(0,o.jsx)(t.h2,{id:"interacting-with-simplestorage",children:"Interacting with SimpleStorage"}),"\n",(0,o.jsxs)(t.p,{children:["Last but not least, let\u2019s go ahead and actually interact with our freshly deployed ",(0,o.jsx)(t.code,{children:"SimpleStorage"})," contract."]}),"\n",(0,o.jsx)(t.p,{children:"Ultimately, there\u2019s a number of ways in which you can interact with on-chain contracts, but for the sake of ease in this instance we\u2019ll be doing it directly from the Truffle console."}),"\n",(0,o.jsx)(t.p,{children:"Let\u2019s create an instance of our deployed contract via the following. Note that behind the scenes, Truffle is referencing the build artifacts (which in turn store the aforementioned contract address), that's why this is an async JavaScript call."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle(develop)> let storage = await SimpleStorage.deployed()    \n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can now interact via the returned ",(0,o.jsx)(t.code,{children:"storage"})," object, for example. Let's do that now, but calling the ",(0,o.jsx)(t.code,{children:"set"})," contract method, writing a new value in the contract state. As you\u2019ll see, given this invocation results in a change of on-chain state, we actually get a transaction \u201creceipt\u201d returned."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"      $ truffle(develop)> await storage.set(42)\n      {        \n        tx: '0x46e4bb35108e5ecf7ff656008295fda572a753476d5e04c286fcdb7868447dd6',        \n        receipt: {          \n          transactionHash: '0x46e4bb35108e5ecf7ff656008295fda572a753476d5e04c286fcdb7868447dd6',          \n          transactionIndex: 0,          \n          blockHash: '0x85dbdf5d71194cb0d841d58bbac283ccf078ce0ebe1c054c6c2ab76442459894',          \n          blockNumber: 9,          \n          from: '0x5ca1605d4671669b38f7e37c881ed996ede5ac68',          \n          to: '0x524b2860a2489e385c5e12537f58d5a09a9d33ab',      \n      ...      \n      }    \n"})}),"\n",(0,o.jsx)(t.p,{children:"And a drum roll for this last command! Run the following to get the originally stored number. (We can also explain the syntax a little bit, since it's a bit odd: We're creating a promise to deliver a big number, which will be our stored number.)"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle(develop)> (await storage.get()).toNumber()\n42        \n"})}),"\n",(0,o.jsx)(t.p,{children:"Congratulations! You\u2019ve now just created, deployed, and interacted with your very first smart contract using the Truffle Suite. Next, we're going to walkthrough how to use Ganache GUI."}),"\n",(0,o.jsx)(t.h2,{id:"ganache-gui",children:"Ganache GUI"}),"\n",(0,o.jsxs)(t.p,{children:["Ganache UI can be really helpful for folks new to smart contract development. Due to its visual nature, it\u2019s a great way to familiarize yourself with all the core constructs of an EVM-based blockchain and help move past that stage of \u201cnot knowing what you don\u2019t know\u201d. It\u2019s fully cross-platform and available to download ",(0,o.jsx)(t.a,{href:"https://www.trufflesuite.com/ganache",children:"here."})]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"image of ganache GUI",src:n(3220).A+"",width:"512",height:"342"})}),"\n",(0,o.jsxs)(t.p,{children:["As you can seen in the above screenshot, it has tabs for all the major constructs including accounts, blocks, transactions, contracts, and events. It also starts it\u2019s own chain instance on port ",(0,o.jsx)(t.code,{children:"7545"})," (note that by default ",(0,o.jsx)(t.code,{children:"truffle develop"})," starts on ",(0,o.jsx)(t.code,{children:"9545"})," and ",(0,o.jsx)(t.code,{children:"ganache"})," on ",(0,o.jsx)(t.code,{children:"8545"}),")."]}),"\n",(0,o.jsx)(t.p,{children:"To best see Ganache UI in action, let\u2019s try deploying the same SimpleStorage (with a few small enhancements) contract from the previous exercise to the chain instance it instantiates."}),"\n",(0,o.jsx)(t.h3,{id:"creating-a-workspace",children:"Creating a Workspace"}),"\n",(0,o.jsx)(t.p,{children:'Upon opening Ganache UI, the first screen you should see is shown below. Select "New Workspace>> Ethereum" (depending on your version you should also see the Corda and Filecoin flavors listed in the dropdown).'}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Workspace section of Ganache",src:n(156).A+"",width:"512",height:"322"})}),"\n",(0,o.jsxs)(t.p,{children:["From here, you\u2019ll be presented with a file picker wherein you can navigate to the project we created earlier and select the ",(0,o.jsx)(t.code,{children:"truffle-config.js"})," file."]}),"\n",(0,o.jsx)(t.p,{children:"All going well you should be presented with the accounts screen we saw earlier. Feel free to take a browse through the tabs to begin familiarizing yourself."}),"\n",(0,o.jsx)(t.h3,{id:"migrating-our-contracts-to-ganache-ui",children:"Migrating our contracts to Ganache UI"}),"\n",(0,o.jsxs)(t.p,{children:["Next up we\u2019re going to migrate our contracts (with a few twists) to the chain instance instantiated by Ganache UI on port ",(0,o.jsx)(t.code,{children:"7545"}),". This will give us a great way to visually inspect what's happening not only on our testnet, but also with the contract itself, as you'll see in a moment."]}),"\n",(0,o.jsxs)(t.p,{children:["Before we can migrate, we\u2019ll need to update our ",(0,o.jsx)(t.code,{children:"truffle-config.js"})," file to include the new network as a destination. Because we used ",(0,o.jsx)(t.code,{children:"truffle init"})," to create our project, it handily includes a number of commented destinations under the ",(0,o.jsx)(t.code,{children:"networks"})," entry. As such you\u2019ll be able to scroll down and uncomment (currently lines 67-70 at the time of writing). Note that we have to change ",(0,o.jsx)(t.code,{children:"port"})," to 7545"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'  development: {  \n    host: "127.0.0.1",\n    port: 7545,\n    network_id: "*",\n  },      \n'})}),"\n",(0,o.jsx)(t.p,{children:"Awesome, we now have a new network we can migrate to! For reference, this same principle applies when migrating to public networks (such as testnets or mainnet; the Ethereum of equivalent of staging and production environments)."}),"\n",(0,o.jsxs)(t.p,{children:["By default, truffle will migrate to the ",(0,o.jsx)(t.code,{children:"development"})," network. If you do not want to use the development network, you can specify an alternative network using ",(0,o.jsx)(t.code,{children:"--network <network name>"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle migrate\n"})}),"\n",(0,o.jsx)(t.p,{children:'Assuming this ran successfully, you\u2019ll now see some corresponding activity in Ganache UI. Of note are the transactions listed under the "Transactions" tab and all the contract information (such as storage, etc) surfaced under the "Contracts" tab. This is a really helpful feature of Truffle and Ganache: the integration of both the testnet environment and smart contract values, updated dynamically. To have all this visually is really powerful for developing and debugging a contract.'}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Transaction information on Ganache GUI",src:n(1781).A+"",width:"512",height:"245"})}),"\n",(0,o.jsxs)(t.p,{children:["Note the ",(0,o.jsx)(t.code,{children:"Storage"}),' (state) section in our "Contracts" section:']}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Contract information on Ganache GUI",src:n(3370).A+"",width:"512",height:"223"})}),"\n",(0,o.jsxs)(t.p,{children:["Last, let\u2019s update our contract to include an event that is emitted every time a new value is set (we'll learn about ",(0,o.jsx)(t.a,{href:"https://medium.com/linum-labs/everything-you-ever-wanted-to-know-about-events-and-logs-on-ethereum-fec84ea7d0a5",children:"events"})," in more detail later in this section). Copy and paste the following over your existing SimpleStorage.sol."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract SimpleStorage {  \n  uint storedData;  \n  \n  event setEvent(uint newValue);  \n  \n  function set(uint x) public {    \n    storedData = x;    \n    emit setEvent(x);  \n  }  \n  \n  function get() public view returns (uint) {    \n    return storedData;  \n  }\n}      \n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now, we will migrate our contract again! Note that ",(0,o.jsx)(t.code,{children:"migrate"})," also runs ",(0,o.jsx)(t.code,{children:"compile"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle migrate\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Let\u2019s now jump back into the Truffle console, this time using the ",(0,o.jsx)(t.code,{children:"console"})," command (vs ",(0,o.jsx)(t.code,{children:"develop"})," which also spins up a ganache instance, which would be redundant this time). Again, by default, Truffle will use the ",(0,o.jsx)(t.code,{children:"development"})," network specified in your config."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"$ truffle console\n"})}),"\n",(0,o.jsx)(t.p,{children:"Like earlier, we can now send the following to set the value within our SimpleStorage."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"  $ let contract = await SimpleStorage.deployed()  \n  $ contract.set(888)\n"})}),"\n",(0,o.jsxs)(t.p,{children:["If all has been successful, you\u2019ll now see both a reference to ",(0,o.jsx)(t.code,{children:"setEvent"})," in the logged output. In addition, you\u2019ll also be able to navigate to the events tab within Ganache UI and also see it there."]}),"\n",(0,o.jsx)(t.h2,{id:"ganache-cli",children:"Ganache CLI"}),"\n",(0,o.jsxs)(t.p,{children:["Ganache CLI is the standalone version of the simulation blockchain built into truffle, it is for folks who are comfortable with the command line and desires full control of thier development blockchain. The latest Ganache CLI version 7 comes with some exiting new features and improvements/bug fixes (discussing these new features and improvements is beyond the scope of this material but if you're curious to dig in, you can start ",(0,o.jsx)(t.a,{href:"https://trufflesuite.com/blog/introducing-ganache-7",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["To get started Ganache CLI, you need to have Node.js >= v12.0.0 and NPM >= 6.4.1 installed on your computer. See ",(0,o.jsx)(t.a,{href:"https://nodejs.org/en/download",children:"here"})," to download the latest version for your operating system. With the supported versions of Node.js and NPM installed, you can install Ganache CLI by running ",(0,o.jsx)(t.code,{children:"npm install ganache --global"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Once installed, start Ganache CLI with the command ",(0,o.jsx)(t.code,{children:"ganache"}),". This is similar to running ",(0,o.jsx)(t.code,{children:"truffle develop"}),". Your command line should look like this:"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{src:"https://user-images.githubusercontent.com/89709023/150743445-7154ab34-ebe0-45f6-a268-fde80f539557.png",alt:"image"})}),"\n",(0,o.jsx)(t.p,{children:"As usual, you are provided with 10 pre-funded account for interacting with your smart contracts."}),"\n",(0,o.jsx)(t.h3,{id:"migrating-our-contracts-to-ganache-cli",children:"Migrating our contracts to Ganache CLI"}),"\n",(0,o.jsxs)(t.p,{children:["Migrating contracts to Ganache CLI is very similar to how its done using Ganache GUI as explained above, the only difference is you will have to update the network in ",(0,o.jsx)(t.code,{children:"truffle-config.js"})," to use port ",(0,o.jsx)(t.code,{children:"8545"})," instead."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:'  development: {  \n    host: "127.0.0.1",\n    port: 8545,\n    network_id: "*",\n  },      \n'})}),"\n",(0,o.jsxs)(t.p,{children:["Now run ",(0,o.jsx)(t.code,{children:"truffle migrate"})," to start the migration process."]}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(t.p,{children:"Great! You\u2019ve now successfully familiarized yourself with Ganache UI and in doing so, hopefully got a little more comfortable with both some of the core Ethereum constructs and the basic elements in the development lifecycle."}),"\n",(0,o.jsx)(t.p,{children:"We know this may be a bit out of your comfort zone, but now that you have a basic understanding of Truffle, you'll be able to start playing around with the Solidity we're going to start learning next!"}),"\n",(0,o.jsx)(t.p,{children:"After we go through Solidity fundamentals and Security, we're going to dive deeper into elements of development on Truffle so you can feel even more confident and capable as a developer."}),"\n",(0,o.jsxs)(t.p,{children:["Before all that, though, we want to introduce one more tool to help you play around with Solidity and other smart contract development languages: ",(0,o.jsx)(t.a,{href:"https://remix.ethereum.org",children:"Remix."})]}),"\n",(0,o.jsx)(t.h2,{id:"additional-material",children:"Additional Material"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://trufflesuite.com/docs/truffle/",children:"Docs: Truffle Suite"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.a,{href:"https://trufflesuite.com/unleashed/",children:"Web3 Unleashed"})," is a series dedicated towards building various dapps and talking with industry experts about the latest in web3 development."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3220:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/ganache-1-2b83783d4051e23cc0609c86ac13137e.png"},156:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/ganache-2-e1de7bb8eb26c17f696d434a28cf1195.png"},1781:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/ganache-3-952f8a639171ba4d8e2c371fea942730.png"},3370:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/ganache-4-78368e2607e6017ef0a1fd63fa220ec1.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(6540);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);