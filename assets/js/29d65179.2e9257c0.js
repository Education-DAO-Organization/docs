"use strict";(self.webpackChunkeducation_docs=self.webpackChunkeducation_docs||[]).push([[7080],{4587:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=n(4848),s=n(8453);const o={},r="Optimizing Gas",a={id:"courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L9-optimizing-gas/index",title:"Optimizing Gas",description:"Reducing the gas consumed by a contract is important in two situations:",source:"@site/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L9-optimizing-gas/index.md",sourceDirName:"courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L9-optimizing-gas",slug:"/courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L9-optimizing-gas/",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L9-optimizing-gas/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"oliver renwick",lastUpdatedAt:1721055769e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"Additional Material: Upgradable Contracts",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M4-design-patterns/L8-add-material-upgradable-contracts/"},next:{title:"Title",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S03-smart-contracts/M5-exercises/L1/"}},c={},d=[{value:"Short Circuit Rules",id:"short-circuit-rules",level:2},{value:"Expensive operations in a loop",id:"expensive-operations-in-a-loop",level:2},{value:"Reduce the number of loops",id:"reduce-the-number-of-loops",level:2},{value:"Fixed size byte arrays",id:"fixed-size-byte-arrays",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"optimizing-gas",children:"Optimizing Gas"}),"\n",(0,i.jsx)(t.p,{children:"Reducing the gas consumed by a contract is important in two situations:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Cost of deploying a contract"}),"\n",(0,i.jsx)(t.li,{children:"Cost to call the contract functions"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://solidity.readthedocs.io/en/v0.7.1/internals/optimiser.html",children:"The Solidity optimizer"})," tries to improve the efficiency of your contract as much as possible during compile time. Feel free to dig into the internals of the optimizer."]}),"\n",(0,i.jsx)(t.p,{children:"One of the best ways to optimize your contracts gas usage is to reduce expensive operations in the contract's functions. Creating and modifying storage variables can be expensive."}),"\n",(0,i.jsx)(t.p,{children:"20,000 gas when a value is set to non-zero from zero; 5,000 gas when writing to existing storage or setting a value to zero; and a 15,000 gas refund when a non-zero value is set to zero."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0",children:"Here is a list of OPCODES and their gas costs."})}),"\n",(0,i.jsx)(t.h2,{id:"short-circuit-rules",children:"Short Circuit Rules"}),"\n",(0,i.jsxs)(t.p,{children:["The operators ",(0,i.jsx)(t.code,{children:"||"})," and ",(0,i.jsx)(t.code,{children:"&&"})," apply the common short-circuiting rules. This means that in the expression ",(0,i.jsx)(t.code,{children:"f(x) || g(y)"}),", if ",(0,i.jsx)(t.code,{children:"f(x)"})," evaluates to true, ",(0,i.jsx)(t.code,{children:"g(y)"})," will not be evaluated even if it may have side-effects."]}),"\n",(0,i.jsxs)(t.p,{children:["How can these functions in ",(0,i.jsx)(t.a,{href:"https://gist.github.com/ConsenSys-Academy/a61670fd8796d73d8b4b7d5935f9e714",children:"Unoptimized.sol"})," be modified to reduce gas usage?"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"function shortCircuit() public view returns(bool){      \n  if (oftenFalse || oftenTrue) {          \n    return true;      \n  } \n}    \n\nfunction shortCircuit2() public view returns(bool){      \n  if(oftenTrue && oftenFalse) {          \n    return false;      \n  } else {          \n    return true;      \n  }  \n}  \n"})}),"\n",(0,i.jsx)(t.h2,{id:"expensive-operations-in-a-loop",children:"Expensive operations in a loop"}),"\n",(0,i.jsx)(t.p,{children:"Modifying storage variables in a loop can be very expensive and should be avoided unless absolutely necessary."}),"\n",(0,i.jsxs)(t.p,{children:["How can this function be improved, given that ",(0,i.jsx)(t.code,{children:"loops"})," is a storage variable? ",(0,i.jsx)(t.a,{href:"https://gist.github.com/ConsenSys-Academy/a61670fd8796d73d8b4b7d5935f9e714#file-unoptimized-sol-L26",children:"Here is the source file."})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"function looping (uint x) public returns (bool) {      \n  for(uint i; i < x; i++){          \n    loops += 1;      \n  }     \n  return true;  \n}  \n"})}),"\n",(0,i.jsx)(t.h2,{id:"reduce-the-number-of-loops",children:"Reduce the number of loops"}),"\n",(0,i.jsx)(t.p,{children:"Zero loops is ideal, but sometimes you just have to loop. Since loops are expensive, can you reduce the number of loops in your functions?"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"function looping2 (uint x) public pure returns(bool){      \n  uint m = 0;      \n  uint v = 0;      \n  for(uint i = 0; i < x; i++){          \n    m += i;      \n  }      \n  for(uint j = 0; j < x; j++){          \n    v -= j;      \n  }      \n  return true;  \n}  \n"})}),"\n",(0,i.jsx)(t.h2,{id:"fixed-size-byte-arrays",children:"Fixed size byte arrays"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://solidity.readthedocs.io/en/latest/types.html#fixed-size-byte-arrays",children:"From the Solidity Docs:"})}),"\n",(0,i.jsxs)(t.p,{children:["It is possible to use an array of bytes as ",(0,i.jsx)(t.code,{children:"byte[]"}),", but it is wasting a lot of space, 31 bytes every element, to be exact, when passing in calls. It is better to use ",(0,i.jsx)(t.code,{children:"bytes"}),". As a rule of thumb, use ",(0,i.jsx)(t.code,{children:"bytes"})," for arbitrary-length raw byte data and ",(0,i.jsx)(t.code,{children:"string"})," for arbitrary-length string (UTF-8) data. If you can limit the length to a certain number of bytes, always use one of ",(0,i.jsx)(t.code,{children:"bytes1"})," to ",(0,i.jsx)(t.code,{children:"bytes32"})," because they are much cheaper."]}),"\n",(0,i.jsx)(t.p,{children:"How can this function be optimized?"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"function byteArray() public returns(uint){      \n  byte[] byteArray;      \n  return gasleft();  \n}  \n"})}),"\n",(0,i.jsx)(t.p,{children:"Additional Resources:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://medium.com/coinmonks/optimizing-your-solidity-contracts-gas-usage-9d65334db6c7",children:"Optimizing Solidity contract's gas usage"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://arxiv.org/pdf/1703.03994.pdf",children:"Under Optimized Smart Contracts Devour Your Money"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://medium.com/better-programming/how-to-write-smart-contracts-that-optimize-gas-spent-on-ethereum-30b5e9c5db85",children:"How to Write Smart Contracts that Optimize Gas"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);