"use strict";(self.webpackChunkeducation_docs=self.webpackChunkeducation_docs||[]).push([[546],{8054:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=t(4848),i=t(8453);const s={},a=void 0,r={id:"courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L2-debug-config-forking/index",title:"index",description:"Squashing Bugs with the Debugger",source:"@site/docs/courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L2-debug-config-forking/index.md",sourceDirName:"courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L2-debug-config-forking",slug:"/courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L2-debug-config-forking/",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L2-debug-config-forking/",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"oliver renwick",lastUpdatedAt:1721055769e3,frontMatter:{},sidebar:"docSidebar",previous:{title:"Testing, 1, 2, 3",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L1-truffle-tests/"},next:{title:"Wire up the React app with Drizzle",permalink:"/educationdao.xyz/docs/courses/blockchain-developer-bootcamp/S04-developer-tooling/M4-truffle-deep-dive/L3-drizzle-ui/"}},d={},c=[{value:"Squashing Bugs with the Debugger",id:"squashing-bugs-with-the-debugger",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"squashing-bugs-with-the-debugger",children:"Squashing Bugs with the Debugger"}),"\n",(0,o.jsx)(n.p,{children:"Debugging is an important part of any software development lifecycle and Truffle ships with a full CLI-based, interactive debugger to help you squash those pesky bugs."}),"\n",(0,o.jsx)(n.p,{children:"A debug instance is always instantiated off the back of a transaction (tx) hash (as we saw returned when we invoked storage.set(42) in the earlier example). For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"    {\n    tx: '0x46e4bb35108e5ecf7ff656008295fda572a753476d5e04c286fcdb7868447dd6',\n    receipt: {\n        transactionHash: '0x46e4bb35108e5ecf7ff656008295fda572a753476d5e04c286fcdb7868447dd6',\n        transactionIndex: 0,\n        blockHash: '0x85dbdf5d71194cb0d841d58bbac283ccf078ce0ebe1c054c6c2ab76442459894',\n        blockNumber: 9,\n        from: '0x5ca1605d4671669b38f7e37c881ed996ede5ac68',\n        to: '0x524b2860a2489e385c5e12537f58d5a09a9d33ab',\n    ...\n    }\n    }\n"})}),"\n",(0,o.jsx)(n.h1,{id:"running-the-debugger",children:"Running the Debugger"}),"\n",(0,o.jsx)(n.p,{children:"Assuming we have a valid transaction hash the debugger is simply invoked as follows. Note that you\u2019ll need to paste in a hash of a transaction that exists on the chain you\u2019re debugging against."}),"\n",(0,o.jsx)(n.p,{children:"truffle debug 0x4a1dcabb384e6ca1b5091495349603499fc2022e5832efdb53f872b6ff23a1c0"}),"\n",(0,o.jsx)(n.p,{children:"Assuming all is good, you should now see the following output (note that the full list of commands has been truncated for brevity):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Starting Truffle Debugger...\n\nAddresses affected:\n0x6cA2F11a43b2B8f4DCE7De62f8Dc03f8E12BC48F - SimpleStorage\n\nCommands:\n(enter) last command entered (step next)\n(o) step over, (i) step into, (u) step out, (n) step next\n(c) continue until breakpoint, (Y) reset & continue to previous error\n(y) (if at end) reset & continue to final error\n(;) step instruction (include number to step multiple)\n\nSimpleStorage.sol:\n\n2: pragma solidity >=0.4.21 <0.7.0;\n3:\n4: contract SimpleStorage {\n ^^^^^^^^^^^^^^^^^^^^^^^^\n\n ...}\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can now start stepping through your code in a manner similar to that of any traditional debugger. As stated in the Truffle docs though it\u2019s worth noting that \u201cyou're not running the code in real-time; instead, you're stepping over the historical execution of that transaction, and mapping that execution onto its associated code\u201d."}),"\n",(0,o.jsx)(n.p,{children:"In the above example, stepping over a couple of times brings us into our SimpleStorage.sol contract wherein we can see our storedData state variable being assigned its new value."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",children:"    SimpleStorage.sol:\n\n    7:   event setEvent(uint newValue);\n    8:\n    9:   function set(uint x) public {\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    debug(develop:0x8bd62b08...)> o\n\n    }\n\n    SimpleStorage.sol:\n\n    8:\n    9:   function set(uint x) public {\n    10:     storedData = x;\n\n    }\n"})}),"\n",(0,o.jsx)(n.h1,{id:"in-test-debugging",children:"In-test Debugging"}),"\n",(0,o.jsx)(n.p,{children:"Lastly, a feature available as of Truffle v5.1 is that of in-test debugging. This essentially enables you to interrupt your tests by simply wrapping a given line with await debug()."}),"\n",(0,o.jsxs)(n.p,{children:["More detail on in-test debugging with a simple example ",(0,o.jsx)(n.a,{href:"https://trufflesuite.com/docs/truffle/getting-started/using-the-truffle-debugger/#in-test-debugging",children:"here"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);